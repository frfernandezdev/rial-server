// Main project (located in apps/)
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.6.3")
	}
}

plugins {
	id 'org.springframework.boot' version '2.6.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

// Common for all projects
allprojects {
	apply plugin: 'java'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'

	sourceCompatibility = '11'
	targetCompatibility = '11'

	repositories {
		mavenCentral()
	}

	dependencies {
		// Prod
		implementation('com.google.firebase:firebase-admin:8.1.0')
		implementation('io.github.cdimascio:java-dotenv:5.2.2')
		implementation('org.reflections:reflections:0.10.2')
		implementation("com.google.guava:guava:31.0.1-jre")

		// Test
		testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')
		testImplementation('org.mockito:mockito-core:4.2.0')
		testImplementation('com.github.javafaker:javafaker:1.0.2')
		testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.2')
	}

	test {
		useJUnitPlatform()

		testLogging {
			events "passed", "skipped", "failed"
		}
	}

	task view_paths {
		doLast { task ->
			println "$task.project.name"
			println "------------------"
			println "Main: $sourceSets.main.java.srcDirTrees"
			println "   Resources: $sourceSets.main.resources.srcDirTrees"
			println "Tests: $sourceSets.test.java.srcDirTrees"
			println "   Resources: $sourceSets.test.resources.srcDirTrees"
		}
	}
}

// All subprojects (located in src/*)
subprojects {
	group("com.rial.${rootProject.name}")

	sourceSets {
		main {
			java { srcDirs = ['main'] }
			resources { srcDirs = ['main/resources'] }
		}

		test {
			java { srcDirs = ['test'] }
			resources { srcDirs = ['test/resources'] }
		}
	}

	dependencies {
		implementation('org.springframework.boot:spring-boot-starter-web')

		testImplementation rootProject.sourceSets.main.output
		testImplementation('org.springframework.boot:spring-boot-starter-test')

		if (project.name != "shared") {
			implementation project(":shared")
			testImplementation project(":shared").sourceSets.test.output
		}
	}

	bootJar {
		enabled = false
	}

	jar {
		enabled = true
	}
}

sourceSets {
	main {
		java { srcDirs = ['apps/main'] }
		resources { srcDirs = ['apps/main/resources'] }
	}

	test {
		java { srcDirs = ['apps/test'] }
		resources { srcDirs = ['apps/test/resources'] }
	}
}

apply plugin: 'application'

bootJar {
	baseName('rial')
	version('0.0.1')
}

mainClassName = 'com.rial.apps.Starter'

dependencies {

	implementation('org.springframework.boot:spring-boot-starter-web')

	implementation project(":shared")
	implementation project(":backoffice")
	implementation project(":backend")

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation project(":shared").sourceSets.test.output
}

